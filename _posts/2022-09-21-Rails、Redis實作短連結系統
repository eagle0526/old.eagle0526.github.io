---
title: Rails、Redis實作短連結系統
author: YeeChen
date: 2022-09-21
category: Rails、Redis
layout: post
---


0、前言
------
> ---    
> **寫此篇文章的動機**  
> 為了練習Redis的功能，因此直接做了一個比較簡單的Project，此專案用到ROR、Redis、TailsWind CSS    
>    
> ---    
{: .block-tip}



1、Redis優點、特性
------
在實作之前先介紹一下Redis的特性，Redis是非關聯式資料庫。

> ---    
> 所有Redis資料都存放在記憶體中，從而實現低延遲和高輸送量的資料存取。 與傳統資料庫不同，記憶體內資料儲存不需要存取磁碟，從而將引擎延遲縮減到微秒。      
> 因此，記憶體內資料儲存能夠支援更大規模的操作，而且回應時間更快。 這項優勢提供超快速的效能，平均讀取和寫入操作時間低於一毫秒，並支援每秒百萬個操作。  
> FROM [AMAZON](https://aws.amazon.com/tw/redis/)   
>    
> ---       
{: .block-tip}

### 1-1、Redis優點

#### 1-1-1、速度
而最大特性就是速度很快，Redis能讀的速度是110000次/s，寫的速度是81000次/s。     
PS. 雖然查到說Redis可以這麼快，不過沒碰上大量資料之前，完全無感XD    

#### 1-1-2、豐富的數據類型
Redis支持二進制案例的Strings、Lists、Hashes、Sets及Ordered Sets 數據類型操作。

#### 1-1-3、原子
Redis的所有操作都是原子性的，意思就是要馬成功執行要馬失敗完全不執行

#### 1-1-4、其他特別特性
Redis還支持publish/subscribe、通知、key expire(過期)等等特性。



2、開始實作
------

介紹完Redis的特性了，那就先把實作的大綱、步驟先寫出來吧～    
     
### 2-1、實作大綱 

#### 2-1-1、環境設定
1、先產生一個存放連結資料的資料庫 - model取名為Link  
2、設定一個方法，當使用者輸入完整連結後，會亂數產生一個slug，這個slug會是之後的短網址其中的字串  
3、接著安裝Redis，等等準備用Redis Hash來儲存使用者輸入的連結內容     
4、把路徑設定好  


#### 2-1-2、使用者模擬
把東西都設定好後，可以模擬使用者輸入連結後的狀況     
1、使用者輸入連結 - https://google.com/  
2、輸入的時候會使用SecureRandom方法，直接亂數產生slug，對應到使用者輸入的連結 - 此時會先存進資料庫   
3、接著再存進Redis Hash裡面  
4、當使用者點擊剛剛亂數產生的短連結時，會先去Redis找有沒有這一筆資料(我們在步驟3，有存一份在Redis)   
5、如果沒有在Redis找到(可以用expire把redis的資料先刪掉，好處等等會說)，去資料庫找該短連結，並寫一份到Redis裡面   



### 2-2、實作細節


#### 2-2-1、設定環境

1、新增一個rails專案
```shell
$ rails new _6.1.7_ ShortLink
```

2、新增Link model - model的column包含以下幾項    
(1) url(使用者輸入完整連結)  
(2) slug(每個連結對應的亂數)     
(3) clicked(點擊次數)    

```shell
$ rails g model Link url slug clicked:integer
```


3、新增亂數方法
```rb
# Link Model

def generate_slug
  self.slug = SecureRandom.uuid[0..5] if self.slug.nil? || self.slug.empty?
end
```

4、使用before_validation，讓link在產生前就會用到此方法、再加上幾個url、slug限制
```rb
# Link Model
validates :url, format: URI::regexp(%w[http https])
validates_uniqueness_of :slug

before_validation :generate_slug

def generate_slug
  self.slug = SecureRandom.uuid[0..5] if self.slug.nil? || self.slug.empty?
end
```


5、安裝Redis

用brew來安裝redis
```shell
$ brew install redis
```

啟動redis環境
```shell
$ redis-server
```

啟動redis console
```shell
$ redis-cli
```


6、制定redis hash的設定

```md
> (1) key - 每個連結的redis key是資料庫連結的id-數字:slug
> (2) 第一個hash - url https://fintechrich.com
> (3) 第二個hash - short http://localhost:3000/shorts/6365a2
> (4) 第三個hash - slug 6365a2
> (5) 第四個hash - visit 0

> 格式設定好後，等等用hset新增
> Ex. hset id-43:6365a2 url https://fintechrich.com short http://localhost:3000/shorts/6365a2 slug 6365a2 visit 0
```

#### 2-2-2、實作controller
環境、方法都設定好後，就可以來完成controller

(1) 首先我們來把Link_controller補完  

```rb
# LinkController

def new
   @link = Link.new
end

def create    
  @link = Link.new(link_params)
  if @link.save
      
    @shortcode = @link.slug

    # 用hash新增 - hset id-43:6365a2 url https://fintechrich.com short http://localhost:3000/shorts/6365a2 slug 6365a2 visit 0
    hash = {"url" => @link.url, "short" => "#{ENV["WEB_DOMAIN"]}/shorts/#{@link.slug}", "slug" => @link.slug, "visit" => 0}
    $redis.hset("id-#{@link.id}:#{@link.slug}", hash)      
  end
  redirect_to root_path
end  
```



